/* autogenerated by Processing revision 1286 on 2024-02-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Overlay_1_2_0 extends PApplet {



String version = "1.2.0";
//Clean up

int smoothVal = 1;

GoPro myGoPro = new GoPro();

AccGauage accGau = new AccGauage();
VelGauage velGau = new VelGauage();
GPSGauage GPSGau = new GPSGauage();
AltGauage altGau = new AltGauage();
GraGauage graGau = new GraGauage();

GyrGauage gyrGau = new GyrGauage();
float roll = 0;
float pitch = 0;

boolean renderingAcc = false;
boolean renderingVel = false;
boolean renderingGPS = false;
boolean renderingAlt = false;
boolean renderingGyr = false;
boolean renderingGra = false;

PGraphics accGraphic;
PGraphics velGraphic;
PGraphics GPSGraphic;
PGraphics altGraphic;
PGraphics gyrGraphic;
PGraphics graGraphic;

int i = 0;
int iAccMax, iVelMax, iGPSMax, iAltMax, iGyrMax, iGraMax, T0;


exporter myExporter = new exporter();
deleteOldFiles myDeleter = new deleteOldFiles();

PFont velFont;

int setFps = 0;

String[] menues = {"Settings", "Render"};
String menu = menues[0];

String[] gauages = {"Acc", "GPS", "Gra", "Vel", "Alt", "Gyr"};
String showGauage = gauages[0];



 public void setup() {

  PImage icon = loadImage("overlay.jpeg");
  surface.setIcon(icon);

  myDeleter.deleteFiles();

  velFont = createFont("arial", 20);
  makeGUI();

  /* smooth commented out by preprocessor */;
  /* size commented out by preprocessor */;
  frameRate(60);

  accGraphic = createGraphics(width, height, JAVA2D);
  velGraphic = createGraphics(width, height, JAVA2D);
  GPSGraphic = createGraphics(width, height, JAVA2D);
  altGraphic = createGraphics(width, height, JAVA2D);
  gyrGraphic = createGraphics(width, height, JAVA2D);
  graGraphic = createGraphics(width, height, JAVA2D);

  accGraphic.smooth(smoothVal);
  velGraphic.smooth(smoothVal);
  GPSGraphic.smooth(smoothVal);
  altGraphic.smooth(smoothVal);
  gyrGraphic.smooth(smoothVal);
  graGraphic.smooth(smoothVal);
}



 public void draw() {

  if (menu == "Render") {
    //Acc
    if (i < iAccMax-1 && RenderAcc) {
      accGau.drawGauage(i);
    } else {
      renderingAcc = true;
    }

    //Vel
    if (i < iVelMax-1 && RenderVel) {
      velGau.drawGauage(i);
    } else {
      renderingVel = true;
    }

    //GPS
    if (i < iGPSMax-1 && RenderGPS) {
      GPSGau.drawGauage(i);
    } else {
      renderingGPS = true;
    }

    //Alt
    if (i < iAltMax-1 && RenderAlt) {
      altGau.drawGauage(i);
    } else {
      renderingAlt = true;
    }

    //Gyro
    if (i < iGyrMax-1 && RenderGyr) {
      gyrGau.drawGauage(i);
    } else {
      renderingGyr = true;
    }

    //Gra
    if (i < iGraMax-1 && RenderGra) {
      graGau.drawGauage(i);
    } else {
      renderingGra = true;
    }

    //FFMPEG
    if (renderingVel &&  renderingAcc && renderingGPS && renderingAlt && renderingGyr && renderingGra) {
      myExporter.exportVideo();
      exit();
    }


    //Feedback to user
    background(100);

    fill(0, 255, 0);
    stroke(0);
    strokeWeight(2);
    rect(0, 0, map(i, 0, iAccMax+1, 0, width), 10);
    rect(0, 11, map(i, 0, iVelMax+1, 0, width), 10);
    rect(0, 22, map(i, 0, iGyrMax+1, 0, width), 10);
    rect(0, 33, map(i, 0, iGraMax+1, 0, width), 10);

    fill(0, 0, 0, 100);
    stroke(0);
    strokeWeight(1);
    rect(0, 0, width, 43);

    fill(255);
    textSize(26);
    textAlign(LEFT, BOTTOM);
    float TTG = max(max(myGoPro.getVelSize() - i, myGoPro.getAccSize() - i), max(myGoPro.getGyrSize() - i, myGoPro.getGraSize() - i)) / frameRate;
    text("Phase 1 || Rendering " + round((frameRate)*10)/10.0f + " fps || TTG: " + round(TTG/6)/10.0f + "min", 20, 33);


    switch(showGauage) {
    case "Acc":
      image(accGraphic, 0, 0, width, height);
      break;
    case "Vel":
      image(velGraphic, 0, 0, width, height);
      break;
    case "GPS":
      image(GPSGraphic, 0, 0, width, height);
      break;
    case "Alt":
      image(altGraphic, 0, 0, width, height);
      break;
    case "Gra":
      image(graGraphic, 0, 0, width, height);
      break;
    case "Gyr":
      image(gyrGraphic, 0, 0, width, height);
      break;
    }

    textAlign(LEFT, BOTTOM);
    text("Showing: " + showGauage, 10, height-10);



    //Itterate
    i++;
  } else if (menu == "Settings") {

    //Feedback to user
    background(100);
    fill(255);
    textSize(14);

    int tYOffset = 405;
    int tDist = 16;

    textAlign(LEFT, CENTER);
    text("Acc dat: " + myGoPro.accPath, 50, tYOffset);
    text("GPS dat: " + myGoPro.GPSPath, 50, tDist*1 + tYOffset);
    text("Gyr dat: " + myGoPro.gyrPath, 50, tDist*2 + tYOffset);
    text("Gra dat: " + myGoPro.graPath, 50, tDist*3 + tYOffset);
    text("Output: " + myExporter.outputPath, 50, tDist*4 + tYOffset);
    text("Acc Len: " + myGoPro.getAccSize(), 50, tDist*5 + tYOffset);
    text("GPS Len: " + myGoPro.getGPSSize(), 50, tDist*6 + tYOffset);
    text("Vel Len: " + myGoPro.getVelSize(), 50, tDist*7 + tYOffset);
    text("Alt Len: " + myGoPro.getAltSize(), 50, tDist*8 + tYOffset);
    text("Gyr Len: " + myGoPro.getGyrSize(), 50, tDist*9 + tYOffset);
    text("Gra Len: " + myGoPro.getGraSize(), 50, tDist*10 + tYOffset);
    text("Framerate: " + setFps, 50, tDist*11 + tYOffset);

    //controlP5 controll
    Controller render = cp5.getController("StartRender");
    Controller renderGPS = cp5.getController("RenderGPS");
    Controller renderVel = cp5.getController("RenderVel");
    Controller renderAlt = cp5.getController("RenderAlt");
    Controller renderAcc = cp5.getController("RenderAcc");
    Controller renderGyr = cp5.getController("RenderGyr");
    Controller renderGra = cp5.getController("RenderGra");

    Boolean GPSLoaded = myGoPro.getGPSSize() > 1;
    Boolean AccLoaded = myGoPro.getAccSize() > 1;
    Boolean GyrLoaded = myGoPro.getGyrSize() > 1;
    Boolean GraLoaded = myGoPro.getGraSize() > 1;
    boolean PathSelected = myExporter.outputPath.length() > 1;
    Boolean OneRender = RenderGPS || RenderVel || RenderAcc || RenderAlt || RenderGyr || RenderGra;

    Boolean notReady = !OneRender || setFps == 0 || !PathSelected;
    renderGPS.setLock(!GPSLoaded);
    renderVel.setLock(!GPSLoaded);
    renderAlt.setLock(!GPSLoaded);
    renderAcc.setLock(!AccLoaded);
    renderGyr.setLock(!GyrLoaded);
    renderGra.setLock(!GraLoaded);

    render.setLock(notReady);
    render.setColorForeground((notReady? color(255, 0, 0) : color(0, 255, 0) ));
  }


  textAlign(RIGHT, BOTTOM);
  text("Ver: " + version, width-10, height-10);
}



class AccGauage {
  private
  float[] extremum(FloatList data) {
    float[] extr = {data.min(), data.max()};
    return(extr);
  }


  public
  FloatList scale = new FloatList();
  int sizeX, sizeY, sizeZ = 100;

   public void setScale(FloatList dataX, FloatList dataY, FloatList dataZ) {
    scale.clear();
    float[] minmax = extremum(dataX);
    scale.append(minmax[0]);
    scale.append(minmax[1]);

    minmax = extremum(dataY);
    scale.append(minmax[0]);
    scale.append(minmax[1]);

    minmax = extremum(dataZ);
    scale.append(minmax[0]);
    scale.append(minmax[1]);
  }

   public void setSize(int x, int y, int z) {
    sizeX = x;
    sizeY = y;
    sizeZ = z;
  }

   public float[] getPos(float accX, float accY, float accZ) {
    float posX = map(accX, scale.get(0), scale.get(1), -sizeX/2, sizeX/2);
    float posY = map(accY, scale.get(2), scale.get(3), -sizeY/2, sizeY/2);
    float posZ = map(accZ, scale.get(4), scale.get(5), -sizeZ/2, sizeZ/2);
    float[] ret = {posX, posY, posZ};
    return(ret);
  }

   public void drawGauage(int i) {
    float accel[] = myGoPro.getAccFromIndex(i);
    float[] pos = accGau.getPos(accel[1], accel[2], accel[3]);

    accGraphic.beginDraw();
    accGraphic.clear();
    accGraphic.translate(width/2, height/2);
    accGraphic.noFill();
    accGraphic.stroke(0);
    accGraphic.strokeWeight(2);
    accGraphic.rect(-50, -50, 100, 100);
    accGraphic.fill(255);
    accGraphic.circle(pos[0], pos[1], 8);
    accGraphic.circle(70, pos[2], 8);
    accGraphic.endDraw();

    String formatted = String.format("%06d", i);
    accGraphic.save("output/acc"+formatted+".png");
  }
}


class GPSGauage {
  private
  float[] extremum(FloatList data) {
    float[] extr = {data.min(), data.max()};
    return(extr);
  }
  
  FloatList trail = new FloatList();
  
  public

  float minLat = 0;
  float minLon = 0;
  float maxLat = 1;
  float maxLon = 1;

  int sizeX, sizeY = 100;

  FloatList lat = new FloatList();
  FloatList lon = new FloatList();

   public void setScale(FloatList lon, FloatList lat) {
    minLat = extremum(lat)[0];
    maxLat = extremum(lat)[1];
    minLon = extremum(lon)[0];
    maxLon = extremum(lon)[1];
  }

   public void setSize(int x, int y) {
    sizeX = x;
    sizeY = y;
  }

   public float[] getPos(float lat, float lon) {
    float dLon = maxLon - minLon;
    float dLat = maxLat - minLat;
    float largDiv = (dLat > dLon ? dLat : dLon);

    float posLon = (lon-minLon) * (sizeX/largDiv) + (largDiv-lon-minLon)/2;
    float posLat = (lat-minLat) * (sizeY/largDiv) + (largDiv-lat-minLat)/2;

    float[] temp = {posLon, posLat};
    return(temp);
  }

   public void drawGauage(int i) {
    float[] GPS = myGoPro.getGPSFromIndex(i);
    float[] pos = GPSGau.getPos(GPS[0], GPS[1]);
    float x = pos[0];
    float y = pos[1];
    
    trail.append(x);
    trail.append(y);
    
    GPSGraphic.beginDraw();
    GPSGraphic.clear();
    GPSGraphic.translate(width/2, height/2);

    for(int a = 2; a < trail.size(); a+=2){
      float px = trail.get(a-2);
      float py = trail.get(a-1);
      float nx = trail.get(a);
      float ny = trail.get(a+1);
      
      GPSGraphic.stroke(0);
      GPSGraphic.strokeWeight(3);
      GPSGraphic.line(px, py, nx, ny);
    }
    
    GPSGraphic.fill(255);
    GPSGraphic.stroke(0);
    GPSGraphic.strokeWeight(1);
    
    GPSGraphic.circle(x, y, 8);

    GPSGraphic.endDraw();

    String formatted = String.format("%06d", i);
    GPSGraphic.save("output/GPS"+formatted+".png");
  }
}



ControlP5 cp5;

boolean RenderGPS = false;
boolean RenderVel = false;
boolean RenderAlt = false;
boolean RenderAcc = false;
boolean RenderGyr = false;
boolean RenderGra = false;


 public void makeGUI() {
  PFont font = createFont("arial", 30);
  PFont samllFont = createFont("arial", 14);
  textFont(font);
  textAlign(LEFT, TOP);
  cp5 = new ControlP5(this);

  int bDist = 45;
  int yOffset = 25;

  //Settings

  cp5.addBang("SelectAccelerationData")
    .setPosition(50, yOffset)
    .setSize(500, 40)
    .setFont(font)
    .setCaptionLabel("Select acceleration data")
    .setTriggerEvent(Bang.RELEASE)
    .getCaptionLabel().align(ControlP5.LEFT, ControlP5.CENTER)
    ;

  cp5.addBang("SelectGPSData")
    .setPosition(50, bDist*1 + yOffset)
    .setSize(500, 40)
    .setFont(font)
    .setCaptionLabel("Select GPS data")
    .setTriggerEvent(Bang.RELEASE)
    .getCaptionLabel().align(ControlP5.LEFT, ControlP5.CENTER)
    ;

  cp5.addBang("SelectGyrData")
    .setPosition(50, bDist*2 + yOffset)
    .setSize(500, 40)
    .setFont(font)
    .setCaptionLabel("Select gyro data")
    .setTriggerEvent(Bang.RELEASE)
    .getCaptionLabel().align(ControlP5.LEFT, ControlP5.CENTER)
    ;

  cp5.addBang("SelectGraData")
    .setPosition(50, bDist*3 + yOffset)
    .setSize(500, 40)
    .setFont(font)
    .setCaptionLabel("Select gravity vector data")
    .setTriggerEvent(Bang.RELEASE)
    .getCaptionLabel().align(ControlP5.LEFT, ControlP5.CENTER)
    ;

  cp5.addTextfield("VideoFramerate")
    .setPosition(50, bDist*4 + yOffset)
    .setSize(100, 40)
    .setFont(font)
    .setCaptionLabel("")
    .setFocus(true)
    .setColor(color(255, 255, 255))
    ;

  cp5.addBang("SetFramerate")
    .setPosition(50 + 100 + 10, bDist*4 + yOffset)
    .setSize(390, 40)
    .setFont(font)
    .setCaptionLabel("Set framerate")
    .setTriggerEvent(Bang.RELEASE)
    .getCaptionLabel().align(ControlP5.LEFT, ControlP5.CENTER)
    ;


  cp5.addBang("SelectOutputFolder")
    .setPosition(50, bDist*5 + yOffset)
    .setSize(500, 40)
    .setFont(font)
    .setCaptionLabel("Select output folder")
    .setTriggerEvent(Bang.RELEASE)
    .getCaptionLabel().align(ControlP5.LEFT, ControlP5.CENTER)
    ;

  cp5.addToggle("RenderGPS")
    .setPosition(50, 300)
    .setCaptionLabel("GPS")
    .setSize(120, 20)
    .setValue(false)
    .getCaptionLabel().setFont(samllFont).align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addToggle("RenderVel")
    .setPosition(175, 300)
    .setCaptionLabel("Velocity")
    .setSize(120, 20)
    .setValue(false)
    .getCaptionLabel().setFont(samllFont).align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addToggle("RenderAcc")
    .setPosition(300, 300)
    .setCaptionLabel("Acceleration")
    .setSize(120, 20)
    .setValue(false)
    .getCaptionLabel().setFont(samllFont).align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addToggle("RenderAlt")
    .setPosition(425, 300)
    .setCaptionLabel("Altitude")
    .setSize(120, 20)
    .setValue(false)
    .getCaptionLabel().setFont(samllFont).align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addToggle("RenderGyr")
    .setPosition(50, 325)
    .setCaptionLabel("Gyroscope")
    .setSize(120, 20)
    .setValue(false)
    .getCaptionLabel().setFont(samllFont).align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addToggle("RenderGra")
    .setPosition(175, 325)
    .setCaptionLabel("Gra. vect.")
    .setSize(120, 20)
    .setValue(false)
    .getCaptionLabel().setFont(samllFont).align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addBang("StartRender")
    .setPosition(50, 350)
    .setSize(500, 40)
    .setFont(font)
    .setCaptionLabel("Start render")
    .getCaptionLabel().align(ControlP5.CENTER, ControlP5.CENTER)
    ;



  //Rendering

  int showOffset = 50;

  cp5.addBang("ShowAcc")
    .setSize(100, 20)
    .setPosition(2, 2 + showOffset)
    .setVisible(false)
    .setFont(samllFont)
    .setCaptionLabel("Accel")
    .getCaptionLabel().align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addBang("ShowGPS")
    .setSize(100, 20)
    .setPosition(2, 24 + showOffset)
    .setVisible(false)
    .setFont(samllFont)
    .setCaptionLabel("GPS")
    .getCaptionLabel().align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addBang("ShowGra")
    .setSize(100, 20)
    .setPosition(2, 46 + showOffset)
    .setVisible(false)
    .setFont(samllFont)
    .setCaptionLabel("Gravity")
    .getCaptionLabel().align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addBang("ShowGyr")
    .setSize(100, 20)
    .setPosition(2, 68 + showOffset)
    .setVisible(false)
    .setFont(samllFont)
    .setCaptionLabel("Gyro")
    .getCaptionLabel().align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addBang("ShowVel")
    .setSize(100, 20)
    .setPosition(2, 90 + showOffset)
    .setVisible(false)
    .setFont(samllFont)
    .setCaptionLabel("Velocity")
    .getCaptionLabel().align(ControlP5.CENTER, ControlP5.CENTER)
    ;

  cp5.addBang("ShowAlt")
    .setSize(100, 20)
    .setPosition(2, 112 + showOffset)
    .setVisible(false)
    .setFont(samllFont)
    .setCaptionLabel("Altitude")
    .getCaptionLabel().align(ControlP5.CENTER, ControlP5.CENTER)
    ;
}



public void SelectOutputFolder() {
  selectFolder("Select output folder", "CheckOutputPath");
}

public void SelectAccelerationData() {
  selectInput("Select acceleration data (.cvs)", "CheckAccPath");
}

public void SelectGPSData() {
  selectInput("Select GPS data (.cvs)", "CheckGPSPath");
}

public void SelectGyrData() {
  selectInput("Select gyro data (.cvs)", "CheckGyrPath");
}

public void SelectGraData() {
  selectInput("Select gravity vector data (.cvs)", "CheckGraPath");
}



 public void CheckOutputPath(File selection) {
  if (selection != null)
    myExporter.outputPath = selection.getAbsolutePath();
}



 public void CheckAccPath(File selection) {
  Boolean AccLoaded = false;

  if (selection != null) {
    myGoPro.accPath = selection.getAbsolutePath();
    myGoPro.loadAccData();
    AccLoaded = myGoPro.getAccSize() > 1;
    iAccMax = myGoPro.getAccSize();
    if (AccLoaded) {
      accGau.setScale(myGoPro.getAccXYZ(1), myGoPro.getAccXYZ(2), myGoPro.getAccXYZ(3));
      accGau.setSize(100, 100, 100);
    }
  }
  Controller renderAcc = cp5.getController("RenderAcc");
  renderAcc.setValue(PApplet.parseInt(AccLoaded));
}

 public void CheckGPSPath(File selection) {
  Boolean GPSLoaded = false;

  if (selection != null) {
    myGoPro.GPSPath = selection.getAbsolutePath();

    myGoPro.loadGPSData();
    GPSLoaded = myGoPro.getGPSSize() > 1;
    iAltMax = myGoPro.getGPSSize();

    if (GPSLoaded) {
      velGau.setScale(myGoPro.velData);
      velGau.setSize(100, 0, PI);
      iVelMax = myGoPro.getVelSize();

      GPSGau.setScale(myGoPro.GPSLatData, myGoPro.GPSLonData);
      GPSGau.setSize(100, 100);
      iGPSMax = myGoPro.getGPSSize();

      altGau.setScale(myGoPro.GPSAltData);
      altGau.setSize(200, 100);
    }
  }

  Controller renderGPS = cp5.getController("RenderGPS");
  Controller renderVel = cp5.getController("RenderVel");
  Controller renderAlt = cp5.getController("RenderAlt");
  renderGPS.setValue(PApplet.parseInt(GPSLoaded));
  renderVel.setValue(PApplet.parseInt(GPSLoaded));
  renderAlt.setValue(PApplet.parseInt(GPSLoaded));
}

 public void CheckGyrPath(File selection) {
  Boolean GyrLoaded = myGoPro.getGyrSize() > 1;
  if (selection != null) {
    myGoPro.gyrPath = selection.getAbsolutePath();
    myGoPro.loadGyrData();
    iGyrMax = myGoPro.getGyrSize();
    GyrLoaded = myGoPro.getGyrSize() > 1;
    if (GyrLoaded) {
      gyrGau.setScale(myGoPro.gyrXData, myGoPro.gyrYData, myGoPro.gyrZData);
      gyrGau.setSize(100, 100, 100);
    }
  }
  Controller renderGyr = cp5.getController("RenderGyr");
  renderGyr.setValue(PApplet.parseInt(GyrLoaded));
}

 public void CheckGraPath(File selection) {
  Boolean GraLoaded = myGoPro.getGraSize() > 1;
  if (selection != null) {
    myGoPro.graPath = selection.getAbsolutePath();
    myGoPro.loadGraData();
    iGraMax = myGoPro.getGraSize();
    GraLoaded = myGoPro.getGraSize() > 1;
    if (GraLoaded) {
      graGau.setSize(100, 100, 100);
    }
  }
  Controller renderGra = cp5.getController("RenderGra");
  renderGra.setValue(PApplet.parseInt(GraLoaded));
}


public void SetFramerate() {
  try {
    setFps = Integer.parseInt(cp5.get(Textfield.class, "VideoFramerate").getText());
  }
  catch(Exception e) {
  }
}



 public void ShowAcc() {
  showGauage = gauages[0];
}

 public void ShowGPS() {
  showGauage = gauages[1];
}

 public void ShowGra() {
  showGauage = gauages[2];
}

 public void ShowVel() {
  showGauage = gauages[3];
}

 public void ShowAlt() {
  showGauage = gauages[4];
}

 public void ShowGyr() {
  showGauage = gauages[5];
}



public void StartRender() {
  menu = menues[1];
  frameRate(999);

  cp5.get(Bang.class, "SelectAccelerationData").hide();
  cp5.get(Bang.class, "SelectGPSData").hide();
  cp5.get(Bang.class, "SelectGyrData").hide();
  cp5.get(Bang.class, "SelectGraData").hide();
  cp5.get(Bang.class, "SelectOutputFolder").hide();

  cp5.get(Textfield.class, "VideoFramerate").hide();
  cp5.get(Bang.class, "SetFramerate").hide();
  cp5.get(Bang.class, "StartRender").hide();

  cp5.get(Toggle.class, "RenderGPS").hide();
  cp5.get(Toggle.class, "RenderAcc").hide();
  cp5.get(Toggle.class, "RenderVel").hide();
  cp5.get(Toggle.class, "RenderAlt").hide();
  cp5.get(Toggle.class, "RenderGyr").hide();
  cp5.get(Toggle.class, "RenderGra").hide();

  cp5.get(Bang.class, "ShowAcc").show().setLock(!RenderAcc);
  cp5.get(Bang.class, "ShowGPS").show().setLock(!RenderGPS);
  cp5.get(Bang.class, "ShowGra").show().setLock(!RenderGra);
  cp5.get(Bang.class, "ShowVel").show().setLock(!RenderVel);
  cp5.get(Bang.class, "ShowAlt").show().setLock(!RenderAlt);
  cp5.get(Bang.class, "ShowGyr").show().setLock(!RenderGyr);

  myExporter.setFramerate(setFps);

  T0 = millis();
}



class GoPro {
  private
    Table accTable;
  Table GPSTable;
  Table gyrTable;
  Table graTable;


   public float[] getTime (String date) {
    date = date.substring(0, date.length() - 1);
    String dateTime[] = date.split("T");
    String time[] = dateTime[1].split(":");
    float fin[] = {Float.parseFloat(time[0]), Float.parseFloat(time[1]), Float.parseFloat(time[2])};
    return(fin);
  }

   public float hmsToMillis(float hms[]) {
    float mill = 0;
    mill += hms[0]*60*60*1000;
    mill += hms[1]*60*1000;
    mill += hms[2]*1000;
    return(mill);
  }


  public
    FloatList accData = new FloatList();

  FloatList GPSLonData = new FloatList();
  FloatList GPSLatData = new FloatList();
  FloatList GPSAltData = new FloatList();

  FloatList velData = new FloatList();

  FloatList gyrXData = new FloatList();
  FloatList gyrYData = new FloatList();
  FloatList gyrZData = new FloatList();

  FloatList graXData = new FloatList();
  FloatList graYData = new FloatList();
  FloatList graZData = new FloatList();

  String accPath = "";
  String GPSPath = "";
  String gyrPath = "";
  String graPath = "";


  //Acceleration
   public void loadAccData() {
    accTable = loadTable(accPath, "header");
    accData.clear();

    boolean first = true;
    float accT0 = 0;

    if (accTable.getColumnTitle(2).equals("Accelerometer [m/s2]")) {
      for (TableRow row : accTable.rows()) {
        float t = hmsToMillis( getTime( row.getString("date") ));
        if (first) {
          accT0 = t;
          first = false;
        }
        t -= accT0;
        float x = Float.parseFloat( row.getString("1") );
        float y = Float.parseFloat( row.getString("2") );
        float z = Float.parseFloat( row.getString("Accelerometer [m/s2]") );

        accData.append(t);
        accData.append(x);
        accData.append(y);
        accData.append(z);
      }
    }
  }

  //GPS
   public void loadGPSData() {
    GPSTable = loadTable(GPSPath, "header");

    GPSLonData.clear();
    GPSLatData.clear();
    GPSAltData.clear();
    velData.clear();

    if (GPSTable.getColumnTitle(2).equals("GPS (Lat.) [deg]")) {
      for (TableRow row : GPSTable.rows()) {

        //float cts = Float.parseFloat( row.getString("cts") );
        float lat = Float.parseFloat( row.getString("GPS (Lat.) [deg]") );
        float lon = Float.parseFloat( row.getString("GPS (Long.) [deg]") );
        float alt = Float.parseFloat( row.getString("GPS (Alt.) [m]") );
        float vel = Float.parseFloat( row.getString("GPS (3D speed) [m/s]") );

        //GPSData.append(cts);
        GPSLatData.append(lat);
        GPSLonData.append(lon);
        GPSAltData.append(alt);

        velData.append(vel);
      }
    }
  }

  //Gyro
   public void loadGyrData() {
    gyrTable = loadTable(gyrPath, "header");

    gyrXData.clear();
    gyrYData.clear();
    gyrZData.clear();

    if (gyrTable.getColumnTitle(2).equals("Gyroscope [rad/s]")) {
      for (TableRow row : gyrTable.rows()) {
        float z = Float.parseFloat( row.getString("Gyroscope [rad/s]") );
        float x = Float.parseFloat( row.getString("1") );
        float y = Float.parseFloat( row.getString("2") );

        gyrXData.append(x);
        gyrYData.append(y);
        gyrZData.append(z);
      }
    }
  }

  //Gravity vector
   public void loadGraData() {
    gyrTable = loadTable(graPath, "header");

    graXData.clear();
    graYData.clear();
    graZData.clear();

    if (gyrTable.getColumnTitle(2).equals("Gravity Vector")) {
      for (TableRow row : gyrTable.rows()) {
        float x = Float.parseFloat( row.getString("Gravity Vector"));
        float z = Float.parseFloat( row.getString("1") );
        float y = Float.parseFloat( row.getString("2") );

        graXData.append(x);
        graYData.append(y);
        graZData.append(z);
      }
    }
  }




   public float[] getAccFromIndex(int idx) {
    idx *= 4;
    float ret[] = {accData.get(idx), accData.get(idx+1), accData.get(idx+2), accData.get(idx+3)};
    return(ret);
  }

   public float getVelFromIndex(int idx) {
    return(velData.get(idx));
  }

   public float[] getGPSFromIndex(int idx) {
    float ret[] = {GPSLonData.get(idx), GPSLatData.get(idx), GPSAltData.get(idx)};
    return(ret);
  }

   public float getAltFromIndex(int idx) {
    float ret = GPSAltData.get(idx);
    return(ret);
  }

   public float[] getGyrFromIndex(int idx) {
    float[] ret = {gyrXData.get(idx), gyrYData.get(idx), gyrZData.get(idx)};
    return(ret);
  }

   public float[] getGraFromIndex(int idx) {
    float[] ret = {graXData.get(idx), graYData.get(idx), graZData.get(idx)};
    return(ret);
  }

   public int getAccSize() {
    int len = (accData.size())/4;
    return(len);
  }

   public int getVelSize() {
    return(velData.size());
  }

   public int getGPSSize() {
    int len = GPSLatData.size();
    return(len);
  }

   public int getGraSize() {
    int len = graXData.size();
    return(len);
  }

   public int getAltSize() {
    int len = GPSAltData.size();
    return(len);
  }

   public int getGyrSize() {
    int len = gyrXData.size();
    return(len);
  }

   public FloatList getAccXYZ(int ofset) {
    FloatList set = new FloatList();
    for (int i = 0; i < accData.size(); i+=4) {
      set.append(accData.get(i + ofset));
    }
    return(set);
  }
}



class GraGauage{
  public
  
  int sizeX, sizeY, sizeZ = 100;
  
   public void setSize(int x, int y, int z){
    sizeX = x;
    sizeY = y;
    sizeZ = z;
  }
  
   public void drawGauage(int i){
    float[] val = myGoPro.getGraFromIndex(i);
    float x = val[0];
    float y = val[1];
    float z = val[2];
    
    graGraphic.beginDraw();
    graGraphic.translate(width/2, height/2);
    graGraphic.clear();
    
    graGraphic.stroke(0);
    graGraphic.strokeWeight(1);
    
    float roll = atan2(z, x);
    float pitch = (atan2(z, y) - PI/2) *180/PI;

    float posY = 0;
    if (pitch > 0) {
      posY = (cos(pitch*PI/180.0f) > 0 ? (sin(pitch*PI/180.0f) > 0 ? pitch%90 : -90+pitch%90) : (sin(pitch*PI/180.0f) > 0 ? 90-pitch%90 : -pitch%90)); //Holy hell...
    } else {
      posY = (cos(pitch*PI/180.0f) > 0 ? (sin(pitch*PI/180.0f) > 0 ? 90+pitch%90 : pitch%90) : (sin(pitch*PI/180.0f) > 0 ? -pitch%90 : -90-pitch%90)); //Holy hell two...
    }

    graGraphic.push();
    graGraphic.rotate(roll-PI/2);
    
    graGraphic.fill(100, 50, 50);
    graGraphic.rect(-width/2, posY, width, height/2);
    graGraphic.fill(0, 255, 255);
    graGraphic.rect(-width/2, posY, width, -height/2);

    for (int a = -90; a <= 90; a+=15) {
      graGraphic.fill(0);
      graGraphic.textSize(15);
      graGraphic.textAlign(CENTER, CENTER);
      if (a != 0) graGraphic.text(-a, 0, a+posY);
    }

    PGraphics mask = createGraphics(width, height, JAVA2D);
    mask.beginDraw();
    mask.translate(width/2, height/2);
    mask.clear();
    mask.fill(255, 255, 255);
    mask.circle(0, 0, 200);
    graGraphic.pop();
    
    graGraphic.push();
    graGraphic.strokeWeight(3);
    graGraphic.stroke(255, 255, 0);
    graGraphic.noFill();
    //graGraphic.text(pitch, 50, 0);
    graGraphic.line(-75, 0, -25, 0);
    graGraphic.line(-25, 0, -25, 10);
    graGraphic.line(25, 0, 75, 0);
    graGraphic.line(25, 0, 25, 10);
    graGraphic.circle(0, 0, 20);
    graGraphic.pop();
    graGraphic.mask(mask);    
    
    graGraphic.endDraw();
    String formatted = String.format("%06d", i);
    graGraphic.save("output/gra"+formatted+".png");
  }
}


class GyrGauage {
  private
  float[] extremum(FloatList data) {
    float[] extr = {data.min(), data.max()};
    return(extr);
  }

  public

  int sizeX, sizeY, sizeZ = 100;
  float maxX, maxY, maxZ, minX, minY, minZ = 0;


   public void setScale(FloatList x, FloatList y, FloatList z) {
    float[] exX = extremum(x);
    float[] exY = extremum(y);
    float[] exZ = extremum(z);

    minX = exX[0];
    maxX = exX[1];
    minY = exY[0];
    maxY = exY[1];
    minZ = exZ[0];
    maxZ = exZ[1];
  }

   public void setSize(int x, int y, int z) {
    sizeX = x;
    sizeY = y;
    sizeZ = z;
  }

   public float[] getPos(float x, float y, float z) {
    float posX = map(x, minX, maxX, 0, sizeX);
    float posY = map(y, minY, maxY, 0, sizeY);
    float posZ = map(z, minZ, maxZ, 0, sizeZ);

    float[] ret = {posX, posY, posZ};
    return(ret);
  }

   public void drawGauage(int i) {
    float[] val = myGoPro.getGyrFromIndex(i);
    gyrGraphic.beginDraw();
    gyrGraphic.translate(width/2, height/2);
    gyrGraphic.clear();


    pitch -= (val[0]*180/PI) / setFps;
    roll += (val[1] / setFps);

    gyrGraphic.push();
    gyrGraphic.rotate(roll + (cos(pitch*PI/180.0f) < 0 ? PI : 0));

    float posY = 0;
    if (pitch > 0) {
      posY = (cos(pitch*PI/180.0f) > 0 ? (sin(pitch*PI/180.0f) > 0 ? pitch%90 : -90+pitch%90) : (sin(pitch*PI/180.0f) > 0 ? 90-pitch%90 : -pitch%90)); //Holy hell...
    } else {
      posY = (cos(pitch*PI/180.0f) > 0 ? (sin(pitch*PI/180.0f) > 0 ? 90+pitch%90 : pitch%90) : (sin(pitch*PI/180.0f) > 0 ? -pitch%90 : -90-pitch%90)); //Holy hell two...
    }

    gyrGraphic.fill(100, 50, 50);
    gyrGraphic.rect(-width/2, posY, width, height/2);
    gyrGraphic.fill(0, 255, 255);
    gyrGraphic.rect(-width/2, posY, width, -height/2);

    for (int a = -90; a <= 90; a+=15) {
      gyrGraphic.fill(0);
      gyrGraphic.textSize(15);
      gyrGraphic.textAlign(CENTER, CENTER);
      if (a != 0) gyrGraphic.text(-a, 0, a+posY);
    }

    PGraphics mask = createGraphics(width, height, JAVA2D);
    mask.beginDraw();
    mask.translate(width/2, height/2);
    mask.clear();
    mask.fill(255, 255, 255);
    mask.circle(0, 0, 200);
    gyrGraphic.pop();

    gyrGraphic.push();
    gyrGraphic.strokeWeight(3);
    gyrGraphic.stroke(255, 255, 0);
    gyrGraphic.noFill();
    //gyrGraphic.text(pitch, 50, 0);
    gyrGraphic.line(-75, 0, -25, 0);
    gyrGraphic.line(-25, 0, -25, 10);
    gyrGraphic.line(25, 0, 75, 0);
    gyrGraphic.line(25, 0, 25, 10);
    gyrGraphic.circle(0, 0, 20);
    gyrGraphic.pop();

    mask.endDraw();
    gyrGraphic.mask(mask);

    gyrGraphic.endDraw();
    String formatted = String.format("%06d", i);
    gyrGraphic.save("output/gyr"+formatted+".png");
  }
}


class VelGauage {
  private

    float[] extremum(FloatList data) {
    float[] extr = {data.min(), data.max()};
    return(extr);
  }

  public

    FloatList scale = new FloatList();
  int radius = 100;
  float startAngle = 0;
  float stopAngle = TWO_PI;

   public void setScale(FloatList data) {
    scale.clear();

    scale.append(extremum(data)[0]);
    scale.append(extremum(data)[1]);
  }

   public void setSize(int r, float sta, float sto) {
    radius = r;
    startAngle = sta;
    stopAngle = sto;
  }

   public float[] getPos(float vel) {
    float x = radius * cos( map(vel, 0, scale.get(1), startAngle, stopAngle) + PI );
    float y = radius * sin( map(vel, 0, scale.get(1), startAngle, stopAngle) + PI );

    float[] ret = {x, y};
    return(ret);
  }

   public void drawGauage(int i) {
    float vel = myGoPro.getVelFromIndex(i);
    float[] pos = velGau.getPos(vel);

    velGraphic.beginDraw();
    velGraphic.clear();
    velGraphic.translate(width/2, height/2);

    velGraphic.stroke(0);
    velGraphic.strokeWeight(3);
    velGraphic.line(0, 0, pos[0], pos[1]);
    velGraphic.stroke(255);
    velGraphic.strokeWeight(1);
    velGraphic.line(0, 0, pos[0], pos[1]);

    velGraphic.textFont(velFont);
    velGraphic.textAlign(CENTER, CENTER);
    
    noStroke();
    velGraphic.fill(50, 50);
    velGraphic.arc(0, 20, 3*radius, 3*radius, PI, TWO_PI);

    int topSpeed = PApplet.parseInt((myGoPro.velData.max() * 3.6f) / 10) * 10 + 10; //km/h
    for (int num = 0; num <= topSpeed; num += 10) {
      float x = 110 * cos(map(num, 0, topSpeed, PI, 0));
      float y = - 110 * sin(map(num, 0, topSpeed, PI, 0));

      velGraphic.fill(255);
      velGraphic.textSize(20);
      velGraphic.text(num, x, y);
    }
    

    velGraphic.endDraw();

    String formatted = String.format("%06d", i);
    velGraphic.save("output/vel"+formatted+".png");
  }
}


class AltGauage {
  private

  float[] extremum(FloatList data) {
    float[] extr = {data.min(), data.max()};
    return(extr);
  }

  public

  float minAlt, maxAlt, dataSize;
  int sizeX = 200;
  int sizeY = 100;

   public void setScale(FloatList data) {
    minAlt = extremum(data)[0];
    maxAlt = extremum(data)[1];
    dataSize = data.size();
  }

   public void setSize(int x, int y) {
    sizeX = x;
    sizeY = y;
  }

   public float[] getPos(float alt, int dis) {
    float x = map(dis, 0, dataSize, 0, sizeX);
    float y = map(alt, minAlt, maxAlt, sizeY, 0);
    float[] ret = {x, y};
    return(ret);
  }

   public void drawGauage(int i) {
    altGraphic.beginDraw();
    altGraphic.clear();
    altGraphic.translate(width/2, height/2);

    altGraphic.fill(0, 100);
    altGraphic.beginShape();

    float[] pos = {-1, -1};
    for (int a = 0; a < i; a++) {
      float alt = myGoPro.getAltFromIndex(a);
      pos = altGau.getPos(alt, a);
      altGraphic.vertex(pos[0], pos[1]);
    }

    altGraphic.vertex(pos[0], altGau.sizeY);
    altGraphic.vertex(0, altGau.sizeY);

    altGraphic.endShape();

    altGraphic.fill(255);
    altGraphic.stroke(0);
    altGraphic.circle(pos[0], pos[1], 8);

    altGraphic.endDraw();
    String formatted = String.format("%06d", i);
    altGraphic.save("output/alt"+formatted+".png");
  }
}


class deleteOldFiles {
  private
  PrintWriter deleter;

  public
  void deleteFiles() {
    deleter = createWriter("deleteOutput.bat");
    deleter.print("START cmd.exe \"/k cd ffmpeg\\bin && rmdir ..\\..\\output /s /q & exit");
    deleter.flush();
    deleter.close();

    launch(sketchPath("")+"deleteOutput.bat");
  }
}


class exporter {
  private
    PrintWriter accExport;
  PrintWriter velExport;
  PrintWriter GPSExport;
  PrintWriter altExport;
  PrintWriter graExport;

  public

    String outputPath = "";


   public void setFramerate(int fps) {
    accExport = createWriter("accExport.bat");
    accExport.print("START cmd.exe \"/k cd ffmpeg\\bin && ffmpeg -framerate " + fps +  " -i ..\\..\\output\\acc%%06d.png -c:v qtrle -pix_fmt argb \"" + outputPath +"\\accOutput.mov\" -y & exit & exit\"");
    accExport.flush();
    accExport.close();

    velExport = createWriter("velExport.bat");
    velExport.print("START cmd.exe \"/k cd ffmpeg\\bin && ffmpeg -framerate " + fps +  " -i ..\\..\\output\\vel%%06d.png -c:v qtrle -pix_fmt argb \"" + outputPath +"\\velOutput.mov\" -y & exit & exit\"");
    velExport.flush();
    velExport.close();

    GPSExport = createWriter("GPSExport.bat");
    GPSExport.print("START cmd.exe \"/k cd ffmpeg\\bin && ffmpeg -framerate " + fps +  " -i ..\\..\\output\\GPS%%06d.png -c:v qtrle -pix_fmt argb \"" + outputPath +"\\GPSOutput.mov\" -y & exit & exit\"");
    GPSExport.flush();
    GPSExport.close();

    altExport = createWriter("altExport.bat");
    altExport.print("START cmd.exe \"/k cd ffmpeg\\bin && ffmpeg -framerate " + fps +  " -i ..\\..\\output\\alt%%06d.png -c:v qtrle -pix_fmt argb \"" + outputPath +"\\altOutput.mov\" -y & exit & exit\"");
    altExport.flush();
    altExport.close();

    altExport = createWriter("gyrExport.bat");
    altExport.print("START cmd.exe \"/k cd ffmpeg\\bin && ffmpeg -framerate " + fps +  " -i ..\\..\\output\\gyr%%06d.png -c:v qtrle -pix_fmt argb \"" + outputPath +"\\gyrOutput.mov\" -y & exit & exit\"");
    altExport.flush();
    altExport.close();

    altExport = createWriter("graExport.bat");
    altExport.print("START cmd.exe \"/k cd ffmpeg\\bin && ffmpeg -framerate " + fps +  " -i ..\\..\\output\\gra%%06d.png -c:v qtrle -pix_fmt argb \"" + outputPath +"\\graOutput.mov\" -y & exit & exit\"");
    altExport.flush();
    altExport.close();
  }

   public void exportVideo() {
    if (RenderVel) {
      launch(sketchPath("")+"velExport.bat");
      delay(1000);
    }
    if (RenderAcc) {
      launch(sketchPath("")+"accExport.bat");
      delay(1000);
    }
    if (RenderGPS) {
      launch(sketchPath("")+"GPSExport.bat");
      delay(1000);
    }
    if (RenderAlt) {
      launch(sketchPath("")+"altExport.bat");
      delay(1000);
    }
    if (RenderGyr) {
      launch(sketchPath("")+"gyrExport.bat");
      delay(1000);
    }
    if (RenderGra) {
      launch(sketchPath("")+"graExport.bat");
      delay(1000);
    }
  }
}


  public void settings() { size(600, 600);
smooth(0); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Overlay_1_2_0" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
